/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.validation.bound;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation.bound.event";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;

import "spine/protodata/ast.proto";
import "spine/protodata/file.proto";
import "spine/validation/numeric_bound.proto";

// The event emitted whenever a field with `(range)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message RangeFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The range value.
    string range = 4;

    // The minimum value that a numeric field can have.
    spine.validation.NumericBound lower_bound = 5;

    // The maximum value that a numeric field can have.
    spine.validation.NumericBound upper_bound = 6;

    // The file in which the option was discovered.
    protodata.File file = 7;
}

// The event emitted whenever a field with `(max)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message MaxFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The max value, as was specified by a user.
    string max = 4;

    // The maximum value that a numeric field can have.
    spine.validation.NumericBound bound = 5;

    // The file in which the option was discovered.
    protodata.File file = 6;
}

// The event emitted whenever a field with `(min)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message MinFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The min value, as was specified by a user.
    string min = 4;

    // The minimum value that a numeric field can have.
    spine.validation.NumericBound bound = 5;

    // The file in which the option was discovered.
    protodata.File file = 6;
}
