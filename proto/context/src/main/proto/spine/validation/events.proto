/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation.event";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;

import "spine/protodata/ast.proto";
import "spine/validation/rule.proto";
import "spine/validation/time_field_type.proto";
import "spine/validation/field_group.proto";
import "spine/time_options.proto";

// The event emitted whenever a simple validation rule is attached to a message type.
message SimpleRuleAdded {

    option (is).java_type = "io.spine.validation.event.RuleAdded";

    protodata.TypeName type = 1;

    SimpleRule rule = 2;
}

// The event emitted whenever a composite validation rule is attached to a message type.
message CompositeRuleAdded {

    option (is).java_type = "io.spine.validation.event.RuleAdded";

    protodata.TypeName type = 1;

    CompositeRule rule = 2;
}

// The event emitted whenever a message-wide validation rule is attached to a type.
message MessageWideRuleAdded {

    option (is).java_type = "io.spine.validation.event.RuleAdded";

    protodata.TypeName type = 1;

    MessageWideRule rule = 3;
}

// A required field has been discovered.
//
// The event emitted in the following cases:
//
// 1. A field with `(required) = true` option is discovered.
// 2. The ID field of a signal message or entity state is identified as required.
//
// The event emission happens iff the necessary checks have been passed, ensuring
// that the option is applied correctly and the ID field qualifies as required.
//
message RequiredFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// The event emitted whenever a field with `(pattern)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message PatternFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The regular expression to match.
    string pattern = 4;

    // Regular expression modifiers.
    PatternOption.Modifier modifier = 5;
}

// The event emitted whenever a field with `(goes)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message GoesFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The required companion field.
    protodata.Field companion = 4;
}

// The event emitted whenever a field with `(distinct) = true` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message DistinctFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// The event emitted whenever a field with `(validate) = true` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message ValidateFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;
}

// The event emitted whenever a field with `(set_once) = true` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message SetOnceFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// The event emitted whenever a field with `(when)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message WhenFieldDiscovered {

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // Defines a restriction for the timestamp.
    Time bound = 4;

    // The type of the field.
    spine.validation.TimeFieldType type = 5;
}

// The event emitted whenever a `oneof` group with `(choice).required = true` option is
// discovered and has passed the necessary checks to confirm the option is applied correctly.
message ChoiceOneofDiscovered {

    protodata.OneofRef id = 1;

    // The required `oneof` group.
    protodata.OneofGroup subject = 2;

    // The error message template.
    string error_message = 3;
}

// The event emitted whenever a message with `(require)` option is discovered
// and has passed the necessary checks to confirm the option is applied correctly.
message RequireMessageDiscovered {

    protodata.TypeName id = 1;

    // The error message template.
    string error_message = 2;

    // A list of field groups as specified by a user.
    string specified_groups = 3;

    // The field groups parsed from the `specified_groups` string.
    repeated FieldGroup group = 4;
}
