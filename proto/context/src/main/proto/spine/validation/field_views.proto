/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "FieldViewsProto";
option java_multiple_files = true;

import "spine/protodata/ast.proto";

// A view on a field that is recognized as required.
//
// This view applies in the following cases:
//
// 1. A field is marked with `(required) = true` option.
// 2. A field serves as the ID of a signal message or entity state.
//
message RequiredField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// A view on a field that is marked with `(validate) = true` option.
message ValidateField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;
}

// A view of a field that is marked with `(set_once) = true` option.
message SetOnceField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// A view of a field that is marked with `(pattern)` option.
message PatternField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The regular expression to match.
    string pattern = 4;

    // Regular expression modifiers.
    PatternOption.Modifier modifier = 5;
}

// A view of a field that is marked with `(goes)` option.
message GoesField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The required companion field.
    protodata.Field companion = 4;
}

// A view of a field that is marked with `(distinct) = true` option.
message DistinctField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}
