syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "FieldViewsProto";
option java_multiple_files = true;

import "spine/validation/range.proto";
import "spine/protodata/ast.proto";

// A view on a field that is marked with `(required) = true` option.
message RequiredField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// A view on a field that is marked with `(validate) = true` option.
message ValidateField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;
}

// A view of a field that is marked with `(set_once)` option.
message SetOnceField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // `true` if the field is marked with `(set_once) = true`, `false` otherwise.
    bool set_once = 4;
}

// A view of a field that is marked with `(pattern)` option.
message PatternField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The regular expression to match.
    string pattern = 4;

    // Regular expression modifiers.
    PatternOption.Modifier modifier = 5;
}

// A view of a field that is marked with `(goes)` option.
message GoesField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The required companion field.
    protodata.Field companion = 4;
}

// A view of a field that is marked with `(distinct) = true` option.
message DistinctField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;
}

// A view of a field that is marked with `(range)` option.
message RangeField {
    option (entity).kind = PROJECTION;

    protodata.FieldRef id = 1;

    // The field in which the option was discovered.
    protodata.Field subject = 2;

    // The error message template.
    string error_message = 3;

    // The range value.
    string range = 4;

    // A minimum value that a numeric field can have.
    spine.validation.MinValue min_value = 5;

    // A maximum value that a numeric field can have.
    spine.validation.MaxValue max_value = 6;
}
