/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "ValidationTestMessagesProto";
option java_package = "io.spine.test.validate";

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

import "spine/test/validation/pattern_option_test.proto";
import "spine/test/validation/required_test.proto";

// Messages for general validation tests.

message ProjectId {
    string value = 1;
}

message TaskId {
    string value = 1;
}

message MessageWithMapStringField {
    map<string, string> map_field = 1;
}

message MessageWithMapMessageField {
    map<string, google.protobuf.Any> map_field = 1;
}

message MessageWithMapByteStringField {
    map<string, bytes> map_field = 1;
}

message MessageWithMapIntField {
    map<string, int32> map_field = 1;
}

message MessageWithMapLongField {
    map<string, int64> map_field = 1;
}

message MessageWithMapBoolField {
    map<string, bool> map_field = 1;
}

message MessageWithMapFloatField {
    map<string, float> map_field = 1;
}

message MessageWithMapDoubleField {
    map<string, double> map_field = 1;
}

// A message which is used to violate its constraints in scope of `MessageFieldValidator` tests.
//
// The field `invalid_field` must contain a non-empty value, but it also must match "^$" regex,
// which represents an empty string. Thus, any instance of this message type is invalid.
message InvalidMessage {
    string invalid_field = 1 [(required) = true, (pattern).regex = "^$"];
}

message AggregateState {
    option (entity).kind = AGGREGATE;

    // An entity ID (ends with `_id` and declared first). The ID is required by default.
    string entity_id = 1;

    // Not an entity ID because it isn't the first field, even tough it ends with `_id`.
    string another_id = 2;
}

message ProjectionState {
    option (entity).kind = PROJECTION;

    // An entity ID, but it isn't required since the option is set to `false`.
    string not_important_id = 1 [(required) = false];
}

