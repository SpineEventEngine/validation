/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "ValidateTestProto";
option java_package = "io.spine.test.validate";

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

import "spine/test/validation/pattern_option_test.proto";
import "spine/test/validation/required_test.proto";

// Messages for "validate" option tests.

message ValidateEnclosed {
    PatternStringFieldValue enclosed = 1 [(validate) = true];
}

message NotValidateEnclosed {
    PatternStringFieldValue enclosed = 1;
}

message ValidateWithCustomMessage {
    PatternStringFieldValue enclosed = 1 [
        (validate) = true,
        (if_invalid).error_msg = "Custom error"
    ];
}

message NotValidateWithCustomMessage {
    PatternStringFieldValue enclosed = 1 [
        (if_invalid).error_msg = "Custom error is redundant in this case"
    ];
}

message ValidateWithRequiredString {
    RequiredString enclosed = 1 [(validate) = true];
}
