/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "StructProto";
option java_multiple_files = true;

import "spine/protodata/ast.proto";

// Inspired by the `google/protobuf/struct.proto`.
//
// Prefer Google's types when integrating with third-party or when converting to/from JSON.
// Prefer these types when strict typing matters more than JSON representation.

// `Value` represents a dynamically typed value which can be either null, a bool, a number,
// a string, a byte string, a recursive message value, an enum value, a list, or a map of values.
//
// Absence of any kind of value indicates an error.
//
message Value {
    // The kind of value.
    oneof kind {

        // Represents a null value.
        NullValue null_value = 1;

        // Represents a boolean value.
        bool bool_value = 2;

        // Represents a double value.
        double number_value = 3;

        // Represents a string value.
        string string_value = 4;

        bytes bytes_value = 5;

        // Represents a structured value.
        MessageValue message_value = 6;

        EnumValue enum_value = 7;

        // Represents a repeated `Value`.
        ListValue list_value = 8;

        // Represents a repeated `Value`.
        MapValue map_value = 9;
    }

    reserved 10 to 20; // For possible extra options in the `kind` oneof.

    // The concrete Protobuf type of this value.
    //
    // Can be used, for example, to distinguish between number values.
    //
    // If `list_value` is set, this is the type of the elements.
    //
    // If `map_value` is set, this is the type of the map values.
    //
    protodata.Type type = 21;
}

// `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.
enum NullValue {

    // Null value.
    NULL_VALUE = 0;
}

// `MessageValue` represents a message for the `Value` type union.
message MessageValue {

    // Unordered map of dynamically typed values.
    map<string, Value> fields = 1;

    // Type of the message.
    //
    // Same as the `Value.type.message`.
    //
    protodata.TypeName type = 2;
}

// `MessageValue` represents an enum constant for the `Value` type union.
message EnumValue {

    // The number associated with this enum constant.
    uint32 const_number = 1;

    // Type of the enum.
    //
    // Same as the `Value.type.enumeration`.
    //
    protodata.TypeName type = 2;
}

// `ListValue` is a wrapper around a repeated field of values.
message ListValue {

    // Repeated field of dynamically typed values.
    repeated Value values = 1;
}

// `MapValue` represents a map for the `Value` type union.
//
// The map must not contain repeating keys.
//
message MapValue {

    repeated Entry value = 1;

    // A single map entry.
    message Entry {

        // A map key.
        //
        // In Protobuf, a map key can only be of certain primitive types. See the official doc for
        // more info: https://developers.google.com/protocol-buffers/docs/proto3#maps
        //
        Value key = 1;

        // A map value.
        Value value = 2;
    }
}
