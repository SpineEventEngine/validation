/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "RuleProto";
option java_multiple_files = true;

import "spine/validation/value.proto";
import "spine/protodata/ast.proto";
import "google/protobuf/any.proto";

// A simple validation rule.
//
// May be expressed as a comparison between two operands. The first operand is always a field value.
// The second operand is the `other_value`. `other_value` is typically derived from the Protobuf
// definition of the validation rule.
//
message SimpleRule {

    // The field which is being compared.
    //
    // If the operator is a custom one, the field might not be set.
    //
    protodata.FieldName field = 1;

    oneof operator_kind {

        // A simple comparison sign.
        ComparisonOperator operator = 2;

        // A custom comparison method, which cannot be covered by a combination of `Sign`s.
        CustomOperator custom_operator = 3;
    }

    // The value to which the field is compared.
    //
    // If the operator is one of the preset `ComparisonOperator`s, this is right hand side of
    // the comparison expression.
    //
    // If the operator is a `CustomOperator`, this is the custom validation feature
    // encoded as a `MessageValue`.
    //
    Value other_value = 4;

    // A human-readable message explaining the error.
    //
    // May include tokens `{value}` and `{other}`, which will be replaced with the runtime values
    // when the error is constructed.
    //
    string error_message = 5;

    // If `true`, this rule is ignored when the field is not set.
    //
    // This does not apply to simple rules which are parts of a `CompositeRule`.
    //
    bool ignored_if_unset = 6;

    // If the associated field is a list or a map, this value shows whether the rule is applied
    // to the collection as a whole or to each element individually.
    //
    // If `true`, the rule is applied to each element (each value, in case of a map). Otherwise,
    // to the collection as a whole.
    //
    // If the associated field is not a collection, the value is ignored.
    //
    bool distribute = 7;
}

// A message-wide validation rule.
//
// Typically, a rule only concerns itself with one field of a message. A message-wide rule defines
// a validation constrains that is not local to one field, but applies to a number of
// fields in a message.
//
message MessageWideRule {

    // A custom operator, applied to the message.
    CustomOperator operator = 1;

    // A human-readable message explaining the error.
    //
    // This message is not format-able. When constructing a rule, the API users must make sure
    // that the all required info is embedded in this message.
    //
    string error_message = 2;
}

// A predefined comparison operator.
//
// Comparison between two values of the same type must always yield a boolean result.
//
enum ComparisonOperator {

    OPERATION_UNKNOWN = 0;

    EQUAL = 1;

    NOT_EQUAL = 2;

    LESS_THAN = 3;

    GREATER_THAN = 4;

    LESS_OR_EQUAL = 5;

    GREATER_OR_EQUAL = 6;
}

// A non-predefined comparison operator.
//
message CustomOperator {

    // Describes how the generated code should behave in a human-readable way.
    string description = 1;

    // A Protobuf message which dictates the expected validation behaviour to a renderer.
    //
    // Renderers match the type of this message to the types of custom validation features known to
    // them. Unknown validation features are ignored.
    //
    // Validation code generation may involve several renderers adding code sequentially. Some
    // renderers may only generate code for certain custom validation features and nothing more.
    //
    google.protobuf.Any feature = 2;
}

// A validation rule which is either a simple rule for one field or a composite rule.
//
message Rule {

    oneof kind {

        SimpleRule simple = 1;

        CompositeRule composite = 2;

        MessageWideRule message_wide = 3;
    }
}

// A validation rule which is a combination of two or more rules.
//
// For example, if a value must be less than 100 and greater than 0, the two simple rules are
// combined into a composite rule with the `AND` operator.
//
message CompositeRule {

    // First rule.
    Rule left = 1;

    // The operation which joins two rules.
    LogicalOperator operator = 2;

    // Second rule.
    Rule right = 3;

    // A human-readable message explaining the error.
    //
    // May include tokens `{left}`, `{right}`, and `{operator}`, which will be replaced with at
    // runtime with the error messages of the `left` and `right` rules and the words "and" or "or"
    // or "xor".
    //
    // May also include the token `{value}`, but only if the `field` is also set.
    //
    string error_message = 4;

    // If this rule describes several constraints of the same field, this is the name of the field.
    //
    // It is only used for diagnostic purposes. The constraints themselves are always validated
    // according to the rules `left` and `right`.
    //
    // If `left` and `right` do not describe constraints of the same field, this value is empty.
    //
    protodata.FieldName field = 5;
}

// A boolean operator.
enum LogicalOperator {

    LO_UNKNOWN = 0;

    // Joins two boolean values with the "and" operator.
    //
    // Whenever generating code for this operator, renderers should prefer using short-circuit
    // evaluation, i.e. if the left operand evaluates to `false`, the right will not be evaluated
    // at all. However, there is no guarantee renderers will adhere to this recommendation.
    //
    AND = 1;

    // Joins two boolean values with the "or" operator.
    //
    // Whenever generating code for this operator, renderers should prefer using short-circuit
    // evaluation, i.e. if the left operand evaluates to `true`, the right will not be evaluated
    // at all. However, there is no guarantee renderers will adhere to this recommendation.
    //
    OR = 2;

    // Joins two boolean values with the "exclusive or" operator.
    //
    // Lazy evaluation of "exclusive or" is impossible, so both operands will always be evaluated.
    //
    XOR = 3;
}
