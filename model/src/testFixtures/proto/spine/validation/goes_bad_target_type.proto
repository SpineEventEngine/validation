/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "GoesBadTargetTypeProto";
option java_multiple_files = true;

/*
Incompatible field types:
    1. double, float.
    2. all integers.
    3. bool.
 */

message GoesBoolTarget {
    string companion = 1;
    bool target = 2 [(goes).with = "companion"];
}

message GoesDoubleTarget {
    string companion = 1;
    double target = 2 [(goes).with = "companion"];
}

message GoesFloatTarget {
    string companion = 1;
    float target = 2 [(goes).with = "companion"];
}

message GoesInt32Target {
    string companion = 1;
    int32 target = 2 [(goes).with = "companion"];
}

message GoesInt64Target {
    string companion = 1;
    int64 target = 2 [(goes).with = "companion"];
}

message GoesUInt32Target {
    string companion = 1;
    uint32 target = 2 [(goes).with = "companion"];
}

message GoesUInt64Target {
    string companion = 1;
    uint64 target = 2 [(goes).with = "companion"];
}

message GoesSInt32Target {
    string companion = 1;
    sint32 target = 2 [(goes).with = "companion"];
}

message GoesSInt64Target {
    string companion = 1;
    sint64 target = 2 [(goes).with = "companion"];
}

message GoesFixed32Target {
    string companion = 1;
    fixed32 target = 2 [(goes).with = "companion"];
}

message GoesFixed64Target {
    string companion = 1;
    fixed64 target = 2 [(goes).with = "companion"];
}

message GoesSFixed32Target {
    string companion = 1;
    sfixed32 target = 2 [(goes).with = "companion"];
}

message GoesSFixed64Target {
    string companion = 1;
    sfixed64 target = 2 [(goes).with = "companion"];
}
