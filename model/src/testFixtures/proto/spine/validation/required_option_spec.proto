/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "RequiredOptionSpecProto";
option java_multiple_files = true;

// Provides a boolean field with the inapplicable `(required)` option.
message RequiredBoolField {
    bool really = 1 [(.required) = true];
}

// Provides an `int32` field with the inapplicable `(required)` option.
message RequiredIntField {
    int32 zero = 1 [(.required) = true];
}

// Provides a `sint64` field with the inapplicable `(required)` option.
message RequiredSignedInt {
    sint64 signed = 1 [(.required) = true];
}

// Provides a `double` field with the inapplicable `(required)` option.
message RequiredDoubleField {
    double temperature = 1 [(.required) = true];
}

// Provides a required field that specifies a custom error message using
// the placeholders not supported by the option.
message IfMissingWithInvalidPlaceholders {
    string value = 1 [
        (.required) = true,
        (if_missing).error_msg = "The `${field.name}` field has default `${field.value}` value."
    ];
}

// Applies `(if_missing)` without the `(required)` option.
message IfMissingWithoutRequired {
    string value = 1 [(if_missing).error_msg = "The `value` must be set."];
}
