/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "RangeInvalidMinMaxProto";
option java_multiple_files = true;

message RangeFloatMinMax {
    float value = 1 [(range).value = "[5.5 .. -8.0]"];
}

message RangeDoubleMinMax {
    double value = 1 [(range).value = "[-5.5 .. -10.0]"];
}

message RangeInt32MinMax {
    int32 value = 1 [(range).value = "[5 .. -8]"];
}

message RangeInt64MinMax {
    int64 value = 1 [(range).value = "[-5 .. -10]"];
}

message RangeUInt32MinMax {
    uint32 value = 1 [(range).value = "[8 .. 5]"];
}

message RangeUInt64MinMax {
    uint64 value = 1 [(range).value = "[8 .. 5]"];
}

message RangeSInt32MinMax {
    sint32 value = 1 [(range).value = "[5 .. -8]"];
}

message RangeSInt64MinMax {
    sint64 value = 1 [(range).value = "[5 .. -8]"];
}

message RangeFixed32MinMax {
    fixed32 value = 1 [(range).value = "[8 .. 5]"];
}

message RangeFixed64MinMax {
    fixed64 value = 1 [(range).value = "[8 .. 5]"];
}

message RangeSFixed32MinMax {
    sfixed32 value = 1 [(range).value = "[5 .. -8]"];
}

message RangeSFixed64MinMax {
    sfixed64 value = 1 [(range).value = "[5 .. -8]"];
}
