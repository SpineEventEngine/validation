/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE kPOSSIBILITY OF SUCH DAMAGE.
 */


syntax = "proto3";

package spine.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.validation";
option java_outer_classname = "RangeFieldExtremaProto";
option java_multiple_files = true;

// A message that tests the `(range)` option handles boundary values for the supported
// field types. These values represent the minimum and maximum values a specific field
// type can be assigned.
message RangeFieldExtrema {
    float float = 1 [(range).value = "[-3.4028235E38 .. 3.4028235E38]"];
    double double = 2 [(range).value ="[-1.7976931348623157E308 .. 1.7976931348623157E308]"];
    int32 int32 = 3 [(range).value = "[-2147483648 .. 2147483647]"];
    int64 int64 = 4 [(range).value = "[-9223372036854775808 .. 9223372036854775807]"];
    uint32 uint32 = 5 [(range).value = "[0 .. 4294967295]"];
    uint64 uint64 = 6 [(range).value = "[0 .. 18446744073709551615]"];
    sint32 sint32 = 7 [(range).value = "[-2147483648 .. 2147483647]"];
    sint64 sint64 = 8 [(range).value = "[-9223372036854775808 .. 9223372036854775807]"];
    fixed32 fixed32 = 9 [(range).value = "[0 .. 4294967295]"];
    fixed64 fixed64 = 10 [(range).value = "[0 .. 18446744073709551615]"];
    sfixed32 sfixed32 = 11 [(range).value = "[-2147483648 .. 2147483647]"];
    sfixed64 sfixed64 = 12 [(range).value = "[-9223372036854775808 .. 9223372036854775807]"];
}
