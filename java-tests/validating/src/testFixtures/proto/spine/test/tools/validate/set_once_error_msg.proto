/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.tools.validate;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.test.tools.validate";
option java_outer_classname = "SetOnceErrorMsgProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

// Tests that the default error message is shown when there's no custom one.
message SetOnceDefaultErrorMsg {
    google.protobuf.Timestamp message = 1 [(set_once) = true];
    string string = 2 [(set_once) = true];
    double double = 3 [(set_once) = true];
    float float = 4 [(set_once) = true];
    int32 int32 = 5 [(set_once) = true];
    int64 int64 = 6 [(set_once) = true];
    uint32 uint32 = 7 [(set_once) = true];
    uint64 uint64 = 8 [(set_once) = true];
    sint32 sint32 = 9 [(set_once) = true];
    sint64 sint64 = 10 [(set_once) = true];
    fixed32 fixed32 = 11 [(set_once) = true];
    fixed64 fixed64 = 12 [(set_once) = true];
    sfixed32 sfixed32 = 13 [(set_once) = true];
    sfixed64 sfixed64 = 14 [(set_once) = true];
    bool bool = 15 [(set_once) = true];
    bytes bytes = 16 [(set_once) = true];
    Accommodation enum = 17 [(set_once) = true];
}

// Tests that the custom error message is shown.
message SetOnceCustomErrorMsg {
    google.protobuf.Timestamp message = 1 [(set_once) = true, (if_set_again).error_msg = "Field_1: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    string string = 2 [(set_once) = true, (if_set_again).error_msg = "Field_2: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    double double = 3 [(set_once) = true, (if_set_again).error_msg = "Field_3: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    float float = 4 [(set_once) = true, (if_set_again).error_msg = "Field_4: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    int32 int32 = 5 [(set_once) = true, (if_set_again).error_msg = "Field_5: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    int64 int64 = 6 [(set_once) = true, (if_set_again).error_msg = "Field_6: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    uint32 uint32 = 7 [(set_once) = true, (if_set_again).error_msg = "Field_7: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    uint64 uint64 = 8 [(set_once) = true, (if_set_again).error_msg = "Field_8: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    sint32 sint32 = 9 [(set_once) = true, (if_set_again).error_msg = "Field_9: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    sint64 sint64 = 10 [(set_once) = true, (if_set_again).error_msg = "Field_10: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    fixed32 fixed32 = 11 [(set_once) = true, (if_set_again).error_msg = "Field_11: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    fixed64 fixed64 = 12 [(set_once) = true, (if_set_again).error_msg = "Field_12: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    sfixed32 sfixed32 = 13 [(set_once) = true, (if_set_again).error_msg = "Field_13: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    sfixed64 sfixed64 = 14 [(set_once) = true, (if_set_again).error_msg = "Field_14: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    bool bool = 15 [(set_once) = true, (if_set_again).error_msg = "Field_15: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    bytes bytes = 16 [(set_once) = true, (if_set_again).error_msg = "Field_16: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
    Accommodation enum = 17 [(set_once) = true, (if_set_again).error_msg = "Field_17: `{fieldName}`; the proposed value: `{proposedValue}`; current value: `{currentValue}`."];
}

enum Accommodation {
    ACM_UNSPECIFIED = 0;
    ACM_HOSTEL = 1;
    ACM_APARTMENT = 2;
    ACM_HOUSE = 3;
}
